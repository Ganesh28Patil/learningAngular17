----------------------------------
EP : 12 ::  Generating Components
----------------------------------
1.) ng generate component <component_name>
        -> in Angualr 17 -> Component are standalone by default
        -> in previous version -> they are NOT standlone by default

2.) To disable default standalone
        ng g c <component_name> --standalone false

2.) But if you are on any other Angular version < 17
        -> Entry in Module file
            AppModule
3.) The components are standalone = true by default
    -> they dont need a module
    -> otherwise you will get error

4.) Angular.json ->
    Adding to schematics and disable standalone  = false in angular.json

---------------------------------
EP : 13 ::  Angualr 17 Vs Angular 16 and below -> with NO AppRoutingModules
--------------------------------
1.) Angular 16 and below nedded atleast 1 module 
    AppModule
    AppRoutingModules

    The routes were defined in AppRoutingModule and imported into the AppModule
    Importing AppRoutingModule into AppModule

2.) Angualr 17 onwards 

        App.routes.ts  ->  AppRoutes
        App.routes.ts  ->  App.config.ts
        AppConfig  ->  main.ts

3.) Can I still use RoutingModule in Angualr 17 ?
    -> Yes
    -> Angualr 17 is backwards compatible

4.) ng g module <module name>  --routing

----------------------------------
EP : 14 ::  Standalone Components
----------------------------------

1.)  ng g c <component_name>  ->  this will create a new folder
     ng g c <component_name> --flat

2.)  ng g c <component_name> --standalone false
    
    You will need a module mandatory

    ng g module <module_name>

    ng g c <component_name> --standalone false --module=<module_name>

 
----------------------------------------
EP : 15 ::  How to use Components
-----------------------------------------
1.)  ng g c <component_name>
2.)  by default each component will have a prefix -> app1<component_name> 
3.)  Unique selector name
4.)  2 step process
    4.1) Import the component into the required component
    4.2) <component_name></component_name>
 
 
---------------------------------
 EP : 16 :: Components Communication 
 (sending data to component /  getting data from component / exchanging of data with in compoenents)
---------------------------------

@Input -> receiving inputs to the component 
@Output -> sending data from component to parent

Crew [Parent]
  Crew-Designations [Child]

Whenever you want to send data from parent to component 
then we should make use of @Input() operator
 <app-child
    [childReceivingDataFromParent]="parentSendingDataToChild"  
  ></app-child>


Whenever you want to send data from component to Parent 
then we should make use of @Output() operator

<app-child    
    (childSendingDataToParent)="parentReceivingDataFromChild($event)"
  ></app-child>

  @Output() childSendingDataToParent = new EventEmitter<string>();
  SendData(){
    this.childSendingDataToParent.emit('Send Data from Child to Parent');
  }

----------------------------
EP : 17 ::  Modules  | AppModule
----------------------------
1.) By default in angular 17 there is no AppModule

2.) Till Angular 16 -> it's mandatory to have AppModule

3.) In Angualr 17 supports modules -> 
    -> we can create our own modules
    -> use just like how we were it earlier

4.) In Angular 17 - we are bootstraping with AppComponent with configuration 

5.) Till Angular 16 -> we are bootstraping with AppModule


--------------------------------
EP : 18 ::  Modules | How to generate Modules
--------------------------------
 Generate Module Command: 
 - To generate a new module, you can use the command : 
    -->  ng g module <module_name>

    -->  ng g c <module_name>/<component_name> -m <module_name> --standalone = false
    --------------------------------------------------------
    Sample Example Command : 
    ng g module users
    ng g c users/add-user -m users
    ng g c users/edit-user -m users --standalone=false

 - This command create new directory for the module and
   generate necceary files (module file, spec file, etc.).

--------------------------------
EP : 19 ::   Modules |  how to use the modules & components
--------------------------------

  1.) Export the component you want to use outside.
  2.) Import the required modules in the component.
  3.) Use the selector to map the component.

--------------------------------
EP : 20 ::  Types of Modules
--------------------------------
  There are 3 types of modules that we can organise code into
    Feature,Shared,Lazy Loading.
  1.) Feature Module  (Divide features in to seperate modules)
        payments
        users
        Crew
        Airlines
        Invoices

  2.) Shared Modules  (That are written once & used in to modules multiple times any where in the application )
        Header
        Authentication
        Authorization
        Footer     

  3.) Lazy Loading Module
        -> ondemand
        -> Home page 
              Users

        -> Cart / Checkout page
              Payments

--------------------------------
EP : 21 ::  Lazy Loading
--------------------------------




--------------------------------
EP : 23 ::  Data Binding
--------------------------------
Data binding in Angular is a fundamental concept that connects the application's data with the user interface, ensuring they stay in sync.

Angular supports several types of data binding: Interpolation, Property Binding, Event Binding,and Two-way Binding.

1.) One way Data Binding 
    1.1.) Interpolation :
      From component(calss) Class to templeate(html)

    1.2.) Property Binding :
      From component (calss) Class to template's element's property(attribute)  

    1.3.) Event Binding :  
      From component (calss) Class to template's element's events   

2.) Two way Data Binding 
    2.1.) Data will flow from component (class) to template and back from template(html/ui) to component(class)
    2.2.) You need data from user
    2.3)  Forms


--------------------------------
EP : ? ::  ?
--------------------------------